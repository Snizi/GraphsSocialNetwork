{
  "version": 3,
  "sources": ["../../react-toastify/src/utils/propValidator.ts", "../../react-toastify/src/utils/collapseToast.ts", "../../react-toastify/src/utils/cssTransition.tsx", "../../react-toastify/src/utils/mapper.ts", "../../react-toastify/src/core/eventManager.ts", "../../react-toastify/src/components/Icons.tsx", "../../react-toastify/src/hooks/useToastContainer.ts", "../../react-toastify/src/hooks/useToast.ts", "../../react-toastify/src/components/CloseButton.tsx", "../../react-toastify/src/components/ProgressBar.tsx", "../../react-toastify/src/components/Toast.tsx", "../../react-toastify/src/components/Transitions.tsx", "../../react-toastify/src/components/ToastContainer.tsx", "../../react-toastify/src/core/toast.ts", "../../react-toastify/src/utils/constant.ts"],
  "sourcesContent": ["import { isValidElement } from 'react';\n\nexport const isNum = (v: any): v is Number =>\n  typeof v === 'number' && !isNaN(v);\n\nexport const isStr = (v: any): v is String => typeof v === 'string';\n\nexport const isFn = (v: any): v is Function => typeof v === 'function';\n\nexport const parseClassName = (v: any) => (isStr(v) || isFn(v) ? v : null);\n\nexport const getAutoCloseDelay = (\n  toastAutoClose?: false | number,\n  containerAutoClose?: false | number\n) =>\n  toastAutoClose === false || (isNum(toastAutoClose) && toastAutoClose > 0)\n    ? toastAutoClose\n    : containerAutoClose;\n\nexport const canBeRendered = <T>(content: T): boolean =>\n  isValidElement(content) || isStr(content) || isFn(content) || isNum(content);\n", "import { Default } from './constant';\n\n/**\n * Used to collapse toast after exit animation\n */\nexport function collapseToast(\n  node: HTMLElement,\n  done: () => void,\n  duration = Default.COLLAPSE_DURATION\n) {\n  const { scrollHeight, style } = node;\n\n  requestAnimationFrame(() => {\n    style.minHeight = 'initial';\n    style.height = scrollHeight + 'px';\n    style.transition = `all ${duration}ms`;\n\n    requestAnimationFrame(() => {\n      style.height = '0';\n      style.padding = '0';\n      style.margin = '0';\n      setTimeout(done, duration as number);\n    });\n  });\n}\n", "import React, { useEffect, useLayoutEffect, useRef } from 'react';\nimport { collapseToast } from './collapseToast';\nimport { Default, SyntheticEvent } from './constant';\n\nimport { ToastTransitionProps } from '../types';\n\nexport interface CSSTransitionProps {\n  /**\n   * Css class to apply when toast enter\n   */\n  enter: string;\n\n  /**\n   * Css class to apply when toast leave\n   */\n  exit: string;\n\n  /**\n   * Append current toast position to the classname.\n   * If multiple classes are provided, only the last one will get the position\n   * For instance `myclass--top-center`...\n   * `Default: false`\n   */\n  appendPosition?: boolean;\n\n  /**\n   * Collapse toast smoothly when exit animation end\n   * `Default: true`\n   */\n  collapse?: boolean;\n\n  /**\n   * Collapse transition duration\n   * `Default: 300`\n   */\n  collapseDuration?: number;\n}\n\nconst enum AnimationStep {\n  Enter,\n  Exit\n}\n\n/**\n * Css animation that just work.\n * You could use animate.css for instance\n *\n *\n * ```\n * cssTransition({\n *   enter: \"animate__animated animate__bounceIn\",\n *   exit: \"animate__animated animate__bounceOut\"\n * })\n * ```\n *\n */\nexport function cssTransition({\n  enter,\n  exit,\n  appendPosition = false,\n  collapse = true,\n  collapseDuration = Default.COLLAPSE_DURATION\n}: CSSTransitionProps) {\n  return function ToastTransition({\n    children,\n    position,\n    preventExitTransition,\n    done,\n    nodeRef,\n    isIn\n  }: ToastTransitionProps) {\n    const enterClassName = appendPosition ? `${enter}--${position}` : enter;\n    const exitClassName = appendPosition ? `${exit}--${position}` : exit;\n    const animationStep = useRef(AnimationStep.Enter);\n\n    useLayoutEffect(() => {\n      const node = nodeRef.current!;\n      const classToToken = enterClassName.split(' ');\n\n      const onEntered = (e: AnimationEvent) => {\n        if (e.target !== nodeRef.current) return;\n\n        node.dispatchEvent(new Event(SyntheticEvent.ENTRANCE_ANIMATION_END));\n        node.removeEventListener('animationend', onEntered);\n        node.removeEventListener('animationcancel', onEntered);\n        if (\n          animationStep.current === AnimationStep.Enter &&\n          e.type !== 'animationcancel'\n        ) {\n          node.classList.remove(...classToToken);\n        }\n      };\n\n      const onEnter = () => {\n        node.classList.add(...classToToken);\n        node.addEventListener('animationend', onEntered);\n        node.addEventListener('animationcancel', onEntered);\n      };\n\n      onEnter();\n    }, []);\n\n    useEffect(() => {\n      const node = nodeRef.current!;\n\n      const onExited = () => {\n        node.removeEventListener('animationend', onExited);\n        collapse ? collapseToast(node, done, collapseDuration) : done();\n      };\n\n      const onExit = () => {\n        animationStep.current = AnimationStep.Exit;\n        node.className += ` ${exitClassName}`;\n        node.addEventListener('animationend', onExited);\n      };\n\n      if (!isIn) preventExitTransition ? onExited() : onExit();\n    }, [isIn]);\n\n    return <>{children}</>;\n  };\n}\n", "import { Toast, ToastItem, ToastItemStatus } from '../types';\n\nexport function toToastItem(toast: Toast, status: ToastItemStatus): ToastItem {\n  return {\n    content: toast.content,\n    containerId: toast.props.containerId,\n    id: toast.props.toastId,\n    theme: toast.props.theme,\n    type: toast.props.type,\n    data: toast.props.data || {},\n    isLoading: toast.props.isLoading,\n    icon: toast.props.icon,\n    status\n  };\n}\n", "import {\n  Id,\n  ToastContent,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  ToastItem\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\nexport const enum Event {\n  Show,\n  Clear,\n  DidMount,\n  WillUnmount,\n  Change,\n  ClearWaitingQueue\n}\n\ntype OnShowCallback = (\n  content: ToastContent,\n  options: NotValidatedToastProps\n) => void;\ntype OnClearCallback = (id?: Id) => void;\ntype OnClearWaitingQueue = (params: ClearWaitingQueueParams) => void;\ntype OnDidMountCallback = (containerInstance: ContainerInstance) => void;\ntype OnWillUnmountCallback = OnDidMountCallback;\n\nexport type OnChangeCallback = (toast: ToastItem) => void;\n\ntype Callback =\n  | OnShowCallback\n  | OnClearCallback\n  | OnClearWaitingQueue\n  | OnDidMountCallback\n  | OnWillUnmountCallback\n  | OnChangeCallback;\ntype TimeoutId = ReturnType<typeof setTimeout>;\n\nexport interface EventManager {\n  list: Map<Event, Callback[]>;\n  emitQueue: Map<Event, TimeoutId[]>;\n  on(event: Event.Show, callback: OnShowCallback): EventManager;\n  on(event: Event.Clear, callback: OnClearCallback): EventManager;\n  on(\n    event: Event.ClearWaitingQueue,\n    callback: OnClearWaitingQueue\n  ): EventManager;\n  on(event: Event.DidMount, callback: OnDidMountCallback): EventManager;\n  on(event: Event.WillUnmount, callback: OnWillUnmountCallback): EventManager;\n  on(event: Event.Change, callback: OnChangeCallback): EventManager;\n  off(event: Event, callback?: Callback): EventManager;\n  cancelEmit(event: Event): EventManager;\n  emit<TData>(\n    event: Event.Show,\n    content: React.ReactNode | ToastContent<TData>,\n    options: NotValidatedToastProps\n  ): void;\n  emit(event: Event.Clear, id?: string | number): void;\n  emit(event: Event.ClearWaitingQueue, params: ClearWaitingQueueParams): void;\n  emit(event: Event.DidMount, containerInstance: ContainerInstance): void;\n  emit(event: Event.WillUnmount, containerInstance: ContainerInstance): void;\n  emit(event: Event.Change, data: ToastItem): void;\n}\n\nexport const eventManager: EventManager = {\n  list: new Map(),\n  emitQueue: new Map(),\n\n  on(event: Event, callback: Callback) {\n    this.list.has(event) || this.list.set(event, []);\n    this.list.get(event)!.push(callback);\n    return this;\n  },\n\n  off(event, callback) {\n    if (callback) {\n      const cb = this.list.get(event)!.filter(cb => cb !== callback);\n      this.list.set(event, cb);\n      return this;\n    }\n    this.list.delete(event);\n    return this;\n  },\n\n  cancelEmit(event) {\n    const timers = this.emitQueue.get(event);\n    if (timers) {\n      timers.forEach(clearTimeout);\n      this.emitQueue.delete(event);\n    }\n\n    return this;\n  },\n\n  /**\n   * Enqueue the event at the end of the call stack\n   * Doing so let the user call toast as follow:\n   * toast('1')\n   * toast('2')\n   * toast('3')\n   * Without setTimemout the code above will not work\n   */\n  emit(event: Event, ...args: any[]) {\n    this.list.has(event) &&\n      this.list.get(event)!.forEach((callback: Callback) => {\n        const timer: TimeoutId = setTimeout(() => {\n          // @ts-ignore\n          callback(...args);\n        }, 0);\n\n        this.emitQueue.has(event) || this.emitQueue.set(event, []);\n        this.emitQueue.get(event)!.push(timer);\n      });\n  }\n};\n", "import React, { cloneElement, isValidElement } from 'react';\n\nimport { Theme, ToastProps, TypeOptions } from '../types';\nimport { Default, isFn, isNum, isStr } from '../utils';\n\n/**\n * Used when providing custom icon\n */\nexport interface IconProps {\n  theme: Theme;\n  type: TypeOptions;\n}\n\nexport type BuiltInIconProps = React.SVGProps<SVGSVGElement> & IconProps;\n\nconst Svg: React.FC<BuiltInIconProps> = ({ theme, type, ...rest }) => (\n  <svg\n    viewBox=\"0 0 24 24\"\n    width=\"100%\"\n    height=\"100%\"\n    fill={\n      theme === 'colored'\n        ? 'currentColor'\n        : `var(--toastify-icon-color-${type})`\n    }\n    {...rest}\n  />\n);\n\nfunction Warning(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z\" />\n    </Svg>\n  );\n}\n\nfunction Info(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z\" />\n    </Svg>\n  );\n}\n\nfunction Success(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z\" />\n    </Svg>\n  );\n}\n\nfunction Error(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z\" />\n    </Svg>\n  );\n}\n\nfunction Spinner() {\n  return <div className={`${Default.CSS_NAMESPACE}__spinner`} />;\n}\n\nexport const Icons = {\n  info: Info,\n  warning: Warning,\n  success: Success,\n  error: Error,\n  spinner: Spinner\n};\n\nconst maybeIcon = (type: string): type is keyof typeof Icons => type in Icons;\n\nexport function getIcon({ theme, type, isLoading, icon }: ToastProps) {\n  let Icon: React.ReactNode = null;\n  const iconProps = { theme, type };\n\n  if (icon === false) {\n    // hide\n  } else if (isFn(icon)) {\n    Icon = icon(iconProps);\n  } else if (isValidElement(icon)) {\n    Icon = cloneElement(icon, iconProps);\n  } else if (isStr(icon) || isNum(icon)) {\n    Icon = icon;\n  } else if (isLoading) {\n    Icon = Icons.spinner();\n  } else if (maybeIcon(type)) {\n    Icon = Icons[type](iconProps);\n  }\n\n  return Icon;\n}\n", "import {\n  useEffect,\n  useRef,\n  useReducer,\n  cloneElement,\n  isValidElement,\n  useState,\n  ReactElement\n} from 'react';\nimport {\n  parseClassName,\n  canBeRendered,\n  isFn,\n  isNum,\n  isStr,\n  getAutoCloseDelay,\n  toToastItem\n} from '../utils';\nimport { eventManager, Event } from '../core/eventManager';\n\nimport {\n  Id,\n  ToastContainerProps,\n  ToastProps,\n  ToastContent,\n  Toast,\n  ToastPosition,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps\n} from '../types';\n\nimport { getIcon } from '../components/Icons';\n\ninterface QueuedToast {\n  toastContent: ToastContent;\n  toastProps: ToastProps;\n  staleId?: Id;\n}\n\nexport interface ContainerInstance {\n  toastKey: number;\n  displayedToast: number;\n  props: ToastContainerProps;\n  containerId?: Id | null;\n  isToastActive: (toastId: Id) => boolean;\n  getToast: (id: Id) => Toast | null | undefined;\n  queue: QueuedToast[];\n  count: number;\n}\n\nexport function useToastContainer(props: ToastContainerProps) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const [toastIds, setToastIds] = useState<Id[]>([]);\n  const containerRef = useRef(null);\n  const toastToRender = useRef(new Map<Id, Toast>()).current;\n  const isToastActive = (id: Id) => toastIds.indexOf(id) !== -1;\n  const instance = useRef<ContainerInstance>({\n    toastKey: 1,\n    displayedToast: 0,\n    count: 0,\n    queue: [],\n    props,\n    containerId: null,\n    isToastActive,\n    getToast: id => toastToRender.get(id)\n  }).current;\n\n  useEffect(() => {\n    instance.containerId = props.containerId;\n    eventManager\n      .cancelEmit(Event.WillUnmount)\n      .on(Event.Show, buildToast)\n      .on(Event.Clear, toastId => containerRef.current && removeToast(toastId))\n      .on(Event.ClearWaitingQueue, clearWaitingQueue)\n      .emit(Event.DidMount, instance);\n\n    return () => {\n      toastToRender.clear();\n      eventManager.emit(Event.WillUnmount, instance);\n    };\n  }, []);\n\n  useEffect(() => {\n    instance.props = props;\n    instance.isToastActive = isToastActive;\n    instance.displayedToast = toastIds.length;\n  });\n\n  function clearWaitingQueue({ containerId }: ClearWaitingQueueParams) {\n    const { limit } = instance.props;\n    if (limit && (!containerId || instance.containerId === containerId)) {\n      instance.count -= instance.queue.length;\n      instance.queue = [];\n    }\n  }\n\n  function removeToast(toastId?: Id) {\n    setToastIds(state =>\n      toastId == null ? [] : state.filter(id => id !== toastId)\n    );\n  }\n\n  function dequeueToast() {\n    const { toastContent, toastProps, staleId } =\n      instance.queue.shift() as QueuedToast;\n    appendToast(toastContent, toastProps, staleId);\n  }\n\n  /**\n   * check if a container is attached to the dom\n   * check for multi-container, build only if associated\n   * check for duplicate toastId if no update\n   */\n  function isNotValid(options: NotValidatedToastProps) {\n    return (\n      !containerRef.current ||\n      (instance.props.enableMultiContainer &&\n        options.containerId !== instance.props.containerId) ||\n      (toastToRender.has(options.toastId) && options.updateId == null)\n    );\n  }\n\n  // this function and all the function called inside needs to rely on refs\n  function buildToast(\n    content: ToastContent,\n    { delay, staleId, ...options }: NotValidatedToastProps\n  ) {\n    if (!canBeRendered(content) || isNotValid(options)) return;\n\n    const { toastId, updateId, data } = options;\n    const { props } = instance;\n    const closeToast = () => removeToast(toastId);\n    const isNotAnUpdate = updateId == null;\n\n    if (isNotAnUpdate) instance.count++;\n\n    const toastProps = {\n      ...props,\n      style: props.toastStyle,\n      key: instance.toastKey++,\n      ...options,\n      toastId,\n      updateId,\n      data,\n      closeToast,\n      isIn: false,\n      className: parseClassName(options.className || props.toastClassName),\n      bodyClassName: parseClassName(\n        options.bodyClassName || props.bodyClassName\n      ),\n      progressClassName: parseClassName(\n        options.progressClassName || props.progressClassName\n      ),\n      autoClose: options.isLoading\n        ? false\n        : getAutoCloseDelay(options.autoClose, props.autoClose),\n      deleteToast() {\n        const removed = toToastItem(toastToRender.get(toastId)!, 'removed');\n        toastToRender.delete(toastId);\n\n        eventManager.emit(Event.Change, removed);\n\n        const queueLen = instance.queue.length;\n        instance.count =\n          toastId == null\n            ? instance.count - instance.displayedToast\n            : instance.count - 1;\n\n        if (instance.count < 0) instance.count = 0;\n\n        if (queueLen > 0) {\n          const freeSlot = toastId == null ? instance.props.limit! : 1;\n\n          if (queueLen === 1 || freeSlot === 1) {\n            instance.displayedToast++;\n            dequeueToast();\n          } else {\n            const toDequeue = freeSlot > queueLen ? queueLen : freeSlot;\n            instance.displayedToast = toDequeue;\n\n            for (let i = 0; i < toDequeue; i++) dequeueToast();\n          }\n        } else {\n          forceUpdate();\n        }\n      }\n    } as ToastProps;\n\n    toastProps.iconOut = getIcon(toastProps);\n\n    if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;\n    if (isFn(options.onClose)) toastProps.onClose = options.onClose;\n\n    toastProps.closeButton = props.closeButton;\n\n    if (options.closeButton === false || canBeRendered(options.closeButton)) {\n      toastProps.closeButton = options.closeButton;\n    } else if (options.closeButton === true) {\n      toastProps.closeButton = canBeRendered(props.closeButton)\n        ? props.closeButton\n        : true;\n    }\n\n    let toastContent = content;\n\n    if (isValidElement(content) && !isStr(content.type)) {\n      toastContent = cloneElement(content as ReactElement, {\n        closeToast,\n        toastProps,\n        data\n      });\n    } else if (isFn(content)) {\n      toastContent = content({ closeToast, toastProps, data });\n    }\n\n    // not handling limit + delay by design. Waiting for user feedback first\n    if (\n      props.limit &&\n      props.limit > 0 &&\n      instance.count > props.limit &&\n      isNotAnUpdate\n    ) {\n      instance.queue.push({ toastContent, toastProps, staleId });\n    } else if (isNum(delay)) {\n      setTimeout(() => {\n        appendToast(toastContent, toastProps, staleId);\n      }, delay);\n    } else {\n      appendToast(toastContent, toastProps, staleId);\n    }\n  }\n\n  function appendToast(\n    content: ToastContent,\n    toastProps: ToastProps,\n    staleId?: Id\n  ) {\n    const { toastId } = toastProps;\n\n    if (staleId) toastToRender.delete(staleId);\n\n    const toast = {\n      content,\n      props: toastProps\n    };\n    toastToRender.set(toastId, toast);\n\n    setToastIds(state => [...state, toastId].filter(id => id !== staleId));\n    eventManager.emit(\n      Event.Change,\n      toToastItem(toast, toast.props.updateId == null ? 'added' : 'updated')\n    );\n  }\n\n  function getToastToRender<T>(\n    cb: (position: ToastPosition, toastList: Toast[]) => T\n  ) {\n    const toRender = new Map<ToastPosition, Toast[]>();\n    const collection = Array.from(toastToRender.values());\n\n    if (props.newestOnTop) collection.reverse();\n\n    collection.forEach(toast => {\n      const { position } = toast.props;\n      toRender.has(position) || toRender.set(position, []);\n      toRender.get(position)!.push(toast);\n    });\n\n    return Array.from(toRender, p => cb(p[0], p[1]));\n  }\n\n  return {\n    getToastToRender,\n    containerRef,\n    isToastActive\n  };\n}\n", "import {\n  useState,\n  useRef,\n  useEffect,\n  isValidElement,\n  DOMAttributes\n} from 'react';\n\nimport { isFn, Default, Direction, SyntheticEvent } from '../utils';\nimport { ToastProps } from '../types';\n\ninterface Draggable {\n  start: number;\n  x: number;\n  y: number;\n  delta: number;\n  removalDistance: number;\n  canCloseOnClick: boolean;\n  canDrag: boolean;\n  boundingRect: DOMRect | null;\n  didMove: boolean;\n}\n\ntype DragEvent = MouseEvent & TouchEvent;\n\nfunction getX(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientX\n    : e.clientX;\n}\n\nfunction getY(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientY\n    : e.clientY;\n}\n\nexport function useToast(props: ToastProps) {\n  const [isRunning, setIsRunning] = useState(false);\n  const [preventExitTransition, setPreventExitTransition] = useState(false);\n  const toastRef = useRef<HTMLDivElement>(null);\n  const drag = useRef<Draggable>({\n    start: 0,\n    x: 0,\n    y: 0,\n    delta: 0,\n    removalDistance: 0,\n    canCloseOnClick: true,\n    canDrag: false,\n    boundingRect: null,\n    didMove: false\n  }).current;\n  const syncProps = useRef(props);\n  const { autoClose, pauseOnHover, closeToast, onClick, closeOnClick } = props;\n\n  useEffect(() => {\n    syncProps.current = props;\n  });\n\n  useEffect(() => {\n    if (toastRef.current)\n      toastRef.current.addEventListener(\n        SyntheticEvent.ENTRANCE_ANIMATION_END,\n        playToast,\n        { once: true }\n      );\n\n    if (isFn(props.onOpen))\n      props.onOpen(isValidElement(props.children) && props.children.props);\n\n    return () => {\n      const props = syncProps.current;\n      if (isFn(props.onClose))\n        props.onClose(isValidElement(props.children) && props.children.props);\n    };\n  }, []);\n\n  useEffect(() => {\n    props.pauseOnFocusLoss && bindFocusEvents();\n    return () => {\n      props.pauseOnFocusLoss && unbindFocusEvents();\n    };\n  }, [props.pauseOnFocusLoss]);\n\n  function onDragStart(\n    e: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent<HTMLElement>\n  ) {\n    if (props.draggable) {\n      // required for ios safari to prevent default swipe behavior\n      if (e.nativeEvent.type === 'touchstart') e.nativeEvent.preventDefault();\n\n      bindDragEvents();\n      const toast = toastRef.current!;\n      drag.canCloseOnClick = true;\n      drag.canDrag = true;\n      drag.boundingRect = toast.getBoundingClientRect();\n      toast.style.transition = '';\n      drag.x = getX(e.nativeEvent as DragEvent);\n      drag.y = getY(e.nativeEvent as DragEvent);\n\n      if (props.draggableDirection === Direction.X) {\n        drag.start = drag.x;\n        drag.removalDistance =\n          toast.offsetWidth * (props.draggablePercent / 100);\n      } else {\n        drag.start = drag.y;\n        drag.removalDistance =\n          toast.offsetHeight *\n          (props.draggablePercent === Default.DRAGGABLE_PERCENT\n            ? props.draggablePercent * 1.5\n            : props.draggablePercent / 100);\n      }\n    }\n  }\n\n  function onDragTransitionEnd(\n    e: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent<HTMLElement>\n  ) {\n    if (drag.boundingRect) {\n      const { top, bottom, left, right } = drag.boundingRect;\n\n      if (\n        e.nativeEvent.type !== 'touchend' &&\n        props.pauseOnHover &&\n        drag.x >= left &&\n        drag.x <= right &&\n        drag.y >= top &&\n        drag.y <= bottom\n      ) {\n        pauseToast();\n      } else {\n        playToast();\n      }\n    }\n  }\n\n  function playToast() {\n    setIsRunning(true);\n  }\n\n  function pauseToast() {\n    setIsRunning(false);\n  }\n\n  function bindFocusEvents() {\n    if (!document.hasFocus()) pauseToast();\n\n    window.addEventListener('focus', playToast);\n    window.addEventListener('blur', pauseToast);\n  }\n\n  function unbindFocusEvents() {\n    window.removeEventListener('focus', playToast);\n    window.removeEventListener('blur', pauseToast);\n  }\n\n  function bindDragEvents() {\n    drag.didMove = false;\n    document.addEventListener('mousemove', onDragMove);\n    document.addEventListener('mouseup', onDragEnd);\n\n    document.addEventListener('touchmove', onDragMove);\n    document.addEventListener('touchend', onDragEnd);\n  }\n\n  function unbindDragEvents() {\n    document.removeEventListener('mousemove', onDragMove);\n    document.removeEventListener('mouseup', onDragEnd);\n\n    document.removeEventListener('touchmove', onDragMove);\n    document.removeEventListener('touchend', onDragEnd);\n  }\n\n  function onDragMove(e: MouseEvent | TouchEvent) {\n    const toast = toastRef.current!;\n    if (drag.canDrag && toast) {\n      drag.didMove = true;\n      if (isRunning) pauseToast();\n      drag.x = getX(e as DragEvent);\n      drag.y = getY(e as DragEvent);\n      if (props.draggableDirection === Direction.X) {\n        drag.delta = drag.x - drag.start;\n      } else {\n        drag.delta = drag.y - drag.start;\n      }\n\n      // prevent false positif during a toast click\n      if (drag.start !== drag.x) drag.canCloseOnClick = false;\n      toast.style.transform = `translate${props.draggableDirection}(${drag.delta}px)`;\n      toast.style.opacity = `${\n        1 - Math.abs(drag.delta / drag.removalDistance)\n      }`;\n    }\n  }\n\n  function onDragEnd() {\n    unbindDragEvents();\n    const toast = toastRef.current!;\n    if (drag.canDrag && drag.didMove && toast) {\n      drag.canDrag = false;\n      if (Math.abs(drag.delta) > drag.removalDistance) {\n        setPreventExitTransition(true);\n        props.closeToast();\n        return;\n      }\n      toast.style.transition = 'transform 0.2s, opacity 0.2s';\n      toast.style.transform = `translate${props.draggableDirection}(0)`;\n      toast.style.opacity = '1';\n    }\n  }\n\n  const eventHandlers: DOMAttributes<HTMLElement> = {\n    onMouseDown: onDragStart,\n    onTouchStart: onDragStart,\n    onMouseUp: onDragTransitionEnd,\n    onTouchEnd: onDragTransitionEnd\n  };\n\n  if (autoClose && pauseOnHover) {\n    eventHandlers.onMouseEnter = pauseToast;\n    eventHandlers.onMouseLeave = playToast;\n  }\n\n  // prevent toast from closing when user drags the toast\n  if (closeOnClick) {\n    eventHandlers.onClick = (e: React.MouseEvent) => {\n      onClick && onClick(e);\n      drag.canCloseOnClick && closeToast();\n    };\n  }\n\n  return {\n    playToast,\n    pauseToast,\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  };\n}\n", "import React from 'react';\nimport { Default } from '../utils';\nimport { Theme, TypeOptions } from '../types';\n\nexport interface CloseButtonProps {\n  closeToast: (e: React.MouseEvent<HTMLElement>) => void;\n  type: TypeOptions;\n  ariaLabel?: string;\n  theme: Theme;\n}\n\nexport function CloseButton({\n  closeToast,\n  theme,\n  ariaLabel = 'close'\n}: CloseButtonProps) {\n  return (\n    <button\n      className={`${Default.CSS_NAMESPACE}__close-button ${Default.CSS_NAMESPACE}__close-button--${theme}`}\n      type=\"button\"\n      onClick={e => {\n        e.stopPropagation();\n        closeToast(e);\n      }}\n      aria-label={ariaLabel}\n    >\n      <svg aria-hidden=\"true\" viewBox=\"0 0 14 16\">\n        <path\n          fillRule=\"evenodd\"\n          d=\"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"\n        />\n      </svg>\n    </button>\n  );\n}\n", "import React from 'react';\nimport cx from 'clsx';\n\nimport { Default, isFn, Type } from './../utils';\nimport { TypeOptions, ToastClassName, Theme } from '../types';\n\nexport interface ProgressBarProps {\n  /**\n   * The animation delay which determine when to close the toast\n   */\n  delay: number;\n\n  /**\n   * Whether or not the animation is running or paused\n   */\n  isRunning: boolean;\n\n  /**\n   * Func to close the current toast\n   */\n  closeToast: () => void;\n\n  /**\n   * Optional type : info, success ...\n   */\n  type: TypeOptions;\n\n  /**\n   * The theme that is currently used\n   */\n  theme: Theme;\n\n  /**\n   * Hide or not the progress bar\n   */\n  hide?: boolean;\n\n  /**\n   * Optionnal className\n   */\n  className?: ToastClassName;\n\n  /**\n   * Optionnal inline style\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Tell wether or not controlled progress bar is used\n   */\n  controlledProgress?: boolean;\n\n  /**\n   * Controlled progress value\n   */\n  progress?: number | string;\n\n  /**\n   * Support rtl content\n   */\n  rtl?: boolean;\n\n  /**\n   * Tell if the component is visible on screen or not\n   */\n  isIn?: boolean;\n}\n\nexport function ProgressBar({\n  delay,\n  isRunning,\n  closeToast,\n  type = Type.DEFAULT,\n  hide,\n  className,\n  style: userStyle,\n  controlledProgress,\n  progress,\n  rtl,\n  isIn,\n  theme\n}: ProgressBarProps) {\n  const isHidden = hide || (controlledProgress && progress === 0);\n  const style: React.CSSProperties = {\n    ...userStyle,\n    animationDuration: `${delay}ms`,\n    animationPlayState: isRunning ? 'running' : 'paused',\n    opacity: isHidden ? 0 : 1\n  };\n\n  if (controlledProgress) style.transform = `scaleX(${progress})`;\n  const defaultClassName = cx(\n    `${Default.CSS_NAMESPACE}__progress-bar`,\n    controlledProgress\n      ? `${Default.CSS_NAMESPACE}__progress-bar--controlled`\n      : `${Default.CSS_NAMESPACE}__progress-bar--animated`,\n    `${Default.CSS_NAMESPACE}__progress-bar-theme--${theme}`,\n    `${Default.CSS_NAMESPACE}__progress-bar--${type}`,\n    {\n      [`${Default.CSS_NAMESPACE}__progress-bar--rtl`]: rtl\n    }\n  );\n  const classNames = isFn(className)\n    ? className({\n        rtl,\n        type,\n        defaultClassName\n      })\n    : cx(defaultClassName, className);\n\n  // \uD83E\uDDD0 controlledProgress is derived from progress\n  // so if controlledProgress is set\n  // it means that this is also the case for progress\n  const animationEvent = {\n    [controlledProgress && progress! >= 1\n      ? 'onTransitionEnd'\n      : 'onAnimationEnd']:\n      controlledProgress && progress! < 1\n        ? null\n        : () => {\n            isIn && closeToast();\n          }\n  };\n\n  // TODO: add aria-valuenow, aria-valuemax, aria-valuemin\n\n  return (\n    <div\n      role=\"progressbar\"\n      aria-hidden={isHidden ? 'true' : 'false'}\n      aria-label=\"notification timer\"\n      className={classNames}\n      style={style}\n      {...animationEvent}\n    />\n  );\n}\n", "import React, { cloneElement, isValidElement, ReactNode } from 'react';\nimport cx from 'clsx';\n\nimport { ProgressBar } from './ProgressBar';\nimport { CloseButton } from './CloseButton';\nimport { ToastProps } from '../types';\nimport { Default, isFn } from '../utils';\nimport { useToast } from '../hooks/useToast';\n\nexport const Toast: React.FC<ToastProps> = props => {\n  const { isRunning, preventExitTransition, toastRef, eventHandlers } =\n    useToast(props);\n  const {\n    closeButton,\n    children,\n    autoClose,\n    onClick,\n    type,\n    hideProgressBar,\n    closeToast,\n    transition: Transition,\n    position,\n    className,\n    style,\n    bodyClassName,\n    bodyStyle,\n    progressClassName,\n    progressStyle,\n    updateId,\n    role,\n    progress,\n    rtl,\n    toastId,\n    deleteToast,\n    isIn,\n    isLoading,\n    iconOut,\n    closeOnClick,\n    theme\n  } = props;\n  const defaultClassName = cx(\n    `${Default.CSS_NAMESPACE}__toast`,\n    `${Default.CSS_NAMESPACE}__toast-theme--${theme}`,\n    `${Default.CSS_NAMESPACE}__toast--${type}`,\n    {\n      [`${Default.CSS_NAMESPACE}__toast--rtl`]: rtl\n    },\n    {\n      [`${Default.CSS_NAMESPACE}__toast--close-on-click`]: closeOnClick\n    }\n  );\n  const cssClasses = isFn(className)\n    ? className({\n        rtl,\n        position,\n        type,\n        defaultClassName\n      })\n    : cx(defaultClassName, className);\n  const isProgressControlled = !!progress || !autoClose;\n\n  const closeButtonProps = { closeToast, type, theme };\n  let Close: React.ReactNode = null;\n\n  if (closeButton === false) {\n    // hide\n  } else if (isFn(closeButton)) {\n    Close = closeButton(closeButtonProps);\n  } else if (isValidElement(closeButton)) {\n    Close = cloneElement(closeButton, closeButtonProps);\n  } else {\n    Close = CloseButton(closeButtonProps);\n  }\n\n  return (\n    <Transition\n      isIn={isIn}\n      done={deleteToast}\n      position={position}\n      preventExitTransition={preventExitTransition}\n      nodeRef={toastRef}\n    >\n      <div\n        id={toastId as string}\n        onClick={onClick}\n        className={cssClasses}\n        {...eventHandlers}\n        style={style}\n        ref={toastRef}\n      >\n        <div\n          {...(isIn && { role: role })}\n          className={\n            isFn(bodyClassName)\n              ? bodyClassName({ type })\n              : cx(`${Default.CSS_NAMESPACE}__toast-body`, bodyClassName)\n          }\n          style={bodyStyle}\n        >\n          {iconOut != null && (\n            <div\n              className={cx(`${Default.CSS_NAMESPACE}__toast-icon`, {\n                [`${Default.CSS_NAMESPACE}--animate-icon ${Default.CSS_NAMESPACE}__zoom-enter`]:\n                  !isLoading\n              })}\n            >\n              {iconOut}\n            </div>\n          )}\n          <div>{children as ReactNode}</div>\n        </div>\n        {Close}\n        <ProgressBar\n          {...(updateId && !isProgressControlled\n            ? { key: `pb-${updateId}` }\n            : {})}\n          rtl={rtl}\n          theme={theme}\n          delay={autoClose as number}\n          isRunning={isRunning}\n          isIn={isIn}\n          closeToast={closeToast}\n          hide={hideProgressBar}\n          type={type}\n          style={progressStyle}\n          className={progressClassName}\n          controlledProgress={isProgressControlled}\n          progress={progress || 0}\n        />\n      </div>\n    </Transition>\n  );\n};\n", "import { Default, cssTransition } from '../utils';\n\nconst getConfig = (animationName: string, appendPosition = false) => ({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__${animationName}-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__${animationName}-exit`,\n  appendPosition\n});\n\nconst Bounce = cssTransition(getConfig('bounce', true));\n\nconst Slide = cssTransition(getConfig('slide', true));\n\nconst Zoom = cssTransition(getConfig('zoom'));\n\nconst Flip = cssTransition(getConfig('flip'));\n\nexport { Bounce, Slide, Zoom, Flip };\n", "// https://github.com/yannickcr/eslint-plugin-react/issues/3140\n/* eslint react/prop-types: \"off\" */\nimport React, { forwardRef, StyleHTMLAttributes, useEffect } from 'react';\nimport cx from 'clsx';\n\nimport { Toast } from './Toast';\nimport { CloseButton } from './CloseButton';\nimport { Bounce } from './Transitions';\nimport { Direction, Default, parseClassName, isFn } from '../utils';\nimport { useToastContainer } from '../hooks/useToastContainer';\nimport { ToastContainerProps, ToastPosition } from '../types';\n\nexport const ToastContainer = forwardRef<HTMLDivElement, ToastContainerProps>(\n  (props, ref) => {\n    const { getToastToRender, containerRef, isToastActive } =\n      useToastContainer(props);\n    const { className, style, rtl, containerId } = props;\n\n    function getClassName(position: ToastPosition) {\n      const defaultClassName = cx(\n        `${Default.CSS_NAMESPACE}__toast-container`,\n        `${Default.CSS_NAMESPACE}__toast-container--${position}`,\n        { [`${Default.CSS_NAMESPACE}__toast-container--rtl`]: rtl }\n      );\n      return isFn(className)\n        ? className({\n            position,\n            rtl,\n            defaultClassName\n          })\n        : cx(defaultClassName, parseClassName(className));\n    }\n\n    useEffect(() => {\n      if (ref) {\n        (ref as React.MutableRefObject<HTMLDivElement>).current =\n          containerRef.current!;\n      }\n    }, []);\n\n    return (\n      <div\n        ref={containerRef}\n        className={Default.CSS_NAMESPACE as string}\n        id={containerId as string}\n      >\n        {getToastToRender((position, toastList) => {\n          const containerStyle: React.CSSProperties = !toastList.length\n            ? { ...style, pointerEvents: 'none' }\n            : { ...style };\n\n          return (\n            <div\n              className={getClassName(position)}\n              style={containerStyle}\n              key={`container-${position}`}\n            >\n              {toastList.map(({ content, props: toastProps }, i) => {\n                return (\n                  <Toast\n                    {...toastProps}\n                    isIn={isToastActive(toastProps.toastId)}\n                    style={\n                      {\n                        ...toastProps.style,\n                        '--nth': i + 1,\n                        '--len': toastList.length\n                      } as StyleHTMLAttributes<HTMLDivElement>\n                    }\n                    key={`toast-${toastProps.key}`}\n                  >\n                    {content}\n                  </Toast>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n);\n\nToastContainer.displayName = 'ToastContainer';\n\nToastContainer.defaultProps = {\n  position: 'top-right',\n  transition: Bounce,\n  autoClose: 5000,\n  closeButton: CloseButton,\n  pauseOnHover: true,\n  pauseOnFocusLoss: true,\n  closeOnClick: true,\n  draggable: true,\n  draggablePercent: Default.DRAGGABLE_PERCENT as number,\n  draggableDirection: Direction.X,\n  role: 'alert',\n  theme: 'light'\n};\n", "import { POSITION, TYPE, isStr, isNum, isFn, Type } from '../utils';\nimport { eventManager, OnChangeCallback, Event } from './eventManager';\nimport {\n  ToastContent,\n  ToastOptions,\n  ToastProps,\n  Id,\n  UpdateOptions,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  TypeOptions\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\ninterface EnqueuedToast {\n  content: ToastContent<any>;\n  options: NotValidatedToastProps;\n}\n\nlet containers = new Map<ContainerInstance | Id, ContainerInstance>();\nlet latestInstance: ContainerInstance | Id;\nlet queue: EnqueuedToast[] = [];\nlet TOAST_ID = 1;\n\n/**\n * Get the toast by id, given it's in the DOM, otherwise returns null\n */\nfunction getToast(toastId: Id, { containerId }: ToastOptions) {\n  const container = containers.get(containerId || latestInstance);\n  return container && container.getToast(toastId);\n}\n\n/**\n * Generate a random toastId\n */\nfunction generateToastId() {\n  return `${TOAST_ID++}`;\n}\n\n/**\n * Generate a toastId or use the one provided\n */\nfunction getToastId(options?: ToastOptions) {\n  return options && (isStr(options.toastId) || isNum(options.toastId))\n    ? options.toastId\n    : generateToastId();\n}\n\n/**\n * If the container is not mounted, the toast is enqueued and\n * the container lazy mounted\n */\nfunction dispatchToast<TData>(\n  content: ToastContent<TData>,\n  options: NotValidatedToastProps\n): Id {\n  if (containers.size > 0) {\n    eventManager.emit(Event.Show, content, options);\n  } else {\n    queue.push({ content, options });\n  }\n\n  return options.toastId;\n}\n\n/**\n * Merge provided options with the defaults settings and generate the toastId\n */\nfunction mergeOptions(type: string, options?: ToastOptions) {\n  return {\n    ...options,\n    type: (options && options.type) || type,\n    toastId: getToastId(options)\n  } as NotValidatedToastProps;\n}\n\nfunction createToastByType(type: string) {\n  return <TData = unknown>(\n    content: ToastContent<TData>,\n    options?: ToastOptions\n  ) => dispatchToast(content, mergeOptions(type, options));\n}\n\nfunction toast<TData = unknown>(\n  content: ToastContent<TData>,\n  options?: ToastOptions\n) {\n  return dispatchToast(content, mergeOptions(Type.DEFAULT, options));\n}\n\ntoast.loading = <TData = unknown>(\n  content: ToastContent<TData>,\n  options?: ToastOptions\n) =>\n  dispatchToast(\n    content,\n    mergeOptions(Type.DEFAULT, {\n      isLoading: true,\n      autoClose: false,\n      closeOnClick: false,\n      closeButton: false,\n      draggable: false,\n      ...options\n    })\n  );\n\nexport interface ToastPromiseParams<\n  TData = unknown,\n  TError = unknown,\n  TPending = unknown\n> {\n  pending?: string | UpdateOptions<TPending>;\n  success?: string | UpdateOptions<TData>;\n  error?: string | UpdateOptions<TError>;\n}\n\nfunction handlePromise<TData = unknown, TError = unknown, TPending = unknown>(\n  promise: Promise<TData> | (() => Promise<TData>),\n  { pending, error, success }: ToastPromiseParams<TData, TError, TPending>,\n  options?: ToastOptions\n) {\n  let id: Id;\n\n  if (pending) {\n    id = isStr(pending)\n      ? toast.loading(pending, options)\n      : toast.loading(pending.render, {\n          ...options,\n          ...(pending as ToastOptions)\n        });\n  }\n\n  const resetParams = {\n    isLoading: null,\n    autoClose: null,\n    closeOnClick: null,\n    closeButton: null,\n    draggable: null,\n    delay: 100\n  };\n\n  const resolver = <T>(\n    type: TypeOptions,\n    input: string | UpdateOptions<T> | undefined,\n    result: T\n  ) => {\n    // Remove the toast if the input has not been provided. This prevents the toast from hanging\n    // in the pending state if a success/error toast has not been provided.\n    if (input == null) {\n      toast.dismiss(id);\n      return;\n    }\n\n    const baseParams = {\n      type,\n      ...resetParams,\n      ...options,\n      data: result\n    };\n    const params = isStr(input) ? { render: input } : input;\n\n    // if the id is set we know that it's an update\n    if (id) {\n      toast.update(id, {\n        ...baseParams,\n        ...params\n      } as UpdateOptions);\n    } else {\n      // using toast.promise without loading\n      toast(params!.render, {\n        ...baseParams,\n        ...params\n      } as ToastOptions);\n    }\n\n    return result;\n  };\n\n  const p = isFn(promise) ? promise() : promise;\n\n  //call the resolvers only when needed\n  p.then(result => resolver('success', success, result)).catch(err =>\n    resolver('error', error, err)\n  );\n\n  return p;\n}\n\ntoast.promise = handlePromise;\ntoast.success = createToastByType(Type.SUCCESS);\ntoast.info = createToastByType(Type.INFO);\ntoast.error = createToastByType(Type.ERROR);\ntoast.warning = createToastByType(Type.WARNING);\ntoast.warn = toast.warning;\ntoast.dark = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(\n    content,\n    mergeOptions(Type.DEFAULT, {\n      theme: 'dark',\n      ...options\n    })\n  );\n\n/**\n * Remove toast programmaticaly\n */\ntoast.dismiss = (id?: Id) => {\n  if (containers.size > 0) {\n    eventManager.emit(Event.Clear, id);\n  } else {\n    queue = queue.filter(t => id != null && t.options.toastId !== id);\n  }\n};\n\n/**\n * Clear waiting queue when limit is used\n */\ntoast.clearWaitingQueue = (params: ClearWaitingQueueParams = {}) =>\n  eventManager.emit(Event.ClearWaitingQueue, params);\n\n/**\n * return true if one container is displaying the toast\n */\ntoast.isActive = (id: Id) => {\n  let isToastActive = false;\n\n  containers.forEach(container => {\n    if (container.isToastActive && container.isToastActive(id)) {\n      isToastActive = true;\n    }\n  });\n\n  return isToastActive;\n};\n\ntoast.update = <TData = unknown>(\n  toastId: Id,\n  options: UpdateOptions<TData> = {}\n) => {\n  // if you call toast and toast.update directly nothing will be displayed\n  // this is why I defered the update\n  setTimeout(() => {\n    const toast = getToast(toastId, options as ToastOptions);\n    if (toast) {\n      const { props: oldOptions, content: oldContent } = toast;\n\n      const nextOptions = {\n        ...oldOptions,\n        ...options,\n        toastId: options.toastId || toastId,\n        updateId: generateToastId()\n      } as ToastProps & UpdateOptions;\n\n      if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;\n\n      const content = nextOptions.render || oldContent;\n      delete nextOptions.render;\n\n      dispatchToast(content, nextOptions);\n    }\n  }, 0);\n};\n\n/**\n * Used for controlled progress bar.\n */\ntoast.done = (id: Id) => {\n  toast.update(id, {\n    progress: 1\n  });\n};\n\n/**\n * Subscribe to change when a toast is added, removed and updated\n *\n * Usage:\n * ```\n * const unsubscribe = toast.onChange((payload) => {\n *   switch (payload.status) {\n *   case \"added\":\n *     // new toast added\n *     break;\n *   case \"updated\":\n *     // toast updated\n *     break;\n *   case \"removed\":\n *     // toast has been removed\n *     break;\n *   }\n * })\n * ```\n */\ntoast.onChange = (callback: OnChangeCallback) => {\n  eventManager.on(Event.Change, callback);\n  return () => {\n    eventManager.off(Event.Change, callback);\n  };\n};\n\n/**\n * @deprecated\n * Will be removed in the next major release.\n */\ntoast.POSITION = POSITION;\n\n/**\n * @deprecated\n * Will be removed in the next major release.\n */\ntoast.TYPE = TYPE;\n\n/**\n * Wait until the ToastContainer is mounted to dispatch the toast\n * and attach isActive method\n */\neventManager\n  .on(Event.DidMount, (containerInstance: ContainerInstance) => {\n    latestInstance = containerInstance.containerId || containerInstance;\n    containers.set(latestInstance, containerInstance);\n\n    queue.forEach(item => {\n      eventManager.emit(Event.Show, item.content, item.options);\n    });\n\n    queue = [];\n  })\n  .on(Event.WillUnmount, (containerInstance: ContainerInstance) => {\n    containers.delete(containerInstance.containerId || containerInstance);\n\n    if (containers.size === 0) {\n      eventManager\n        .off(Event.Show)\n        .off(Event.Clear)\n        .off(Event.ClearWaitingQueue);\n    }\n  });\n\nexport { toast };\n", "import { ToastPosition, TypeOptions } from '../types';\n\ntype KeyOfPosition =\n  | 'TOP_LEFT'\n  | 'TOP_RIGHT'\n  | 'TOP_CENTER'\n  | 'BOTTOM_LEFT'\n  | 'BOTTOM_RIGHT'\n  | 'BOTTOM_CENTER';\n\ntype KeyOfType = 'INFO' | 'SUCCESS' | 'WARNING' | 'ERROR' | 'DEFAULT';\n\n/**\n * @deprecated\n */\nexport const POSITION: { [key in KeyOfPosition]: ToastPosition } = {\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n  TOP_CENTER: 'top-center',\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_CENTER: 'bottom-center'\n};\n\n/**\n * @deprecated\n */\nexport const TYPE: { [key in KeyOfType]: TypeOptions } = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error',\n  DEFAULT: 'default'\n};\n\nexport const enum Type {\n  INFO = 'info',\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ERROR = 'error',\n  DEFAULT = 'default'\n}\n\nexport const enum Default {\n  COLLAPSE_DURATION = 300,\n  DEBOUNCE_DURATION = 50,\n  CSS_NAMESPACE = 'Toastify',\n  DRAGGABLE_PERCENT = 80\n}\n\nexport const enum Direction {\n  X = 'x',\n  Y = 'y'\n}\n\nexport const enum SyntheticEvent {\n  ENTRANCE_ANIMATION_END = 'd'\n}\n"],
  "mappings": "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",
  "names": []
}
